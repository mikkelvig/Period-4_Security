
Explain and demonstrate ways to protect user passwords on our backends, and why this is necessary.

Explain about password hashing, salts and the difference between bcrypt and older (not recommended)
algorithms like sha1, md5 etc.



Hashing
Hash algorithms are one way functions. They turn any amount of data into a fixed-length "fingerprint" that
cannot be reversed. They also have the property that if the input changes by even a tiny bit, the resulting
hash is completely different. This is great for protecting passwords, because we want
to store passwords in a form that protects them even if the password file itself is compromised, but at the
same time, we need to be able to verify that a user's password is correct.

hash("hello") = 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824
hash("hbllo") = 58756879c05c68dfac9866712fad6a93f8146f337a69afe7dd238f3364946366
hash("waltz") = c0e81794384491161f1777c232bc6bd9ec38f616560b120fda8e90f383853542


Salt
We can randomize the hashes by appending or prepending a random string, called a salt, to the password before
hashing. This makes the same password hash into a completely different string every time. To check if a
password is correct, we need the salt, so it is usually stored in the user account database along with the
hash, or as part of the hash string itself.

hash("hello")                    = 2cf24dba5fb0a30e26e83b2ac5b9e29e1b161e5c1fa7425e73043362938b9824
hash("hello" + "QxLUF1bgIAdeQX") = 9e209040c863f84a31e719795b2577523954739fe5ed3b58a75cff2127075ed1
hash("hello" + "bv5PehSMfV11Cd") = d1d3ec2e6f20fd420d50e2642992841d8338a314b8ea157c9e18477aaef226ab
hash("hello" + "YYLmfY6IehjZMQ") = a49670c3c18b9e079b9cfaf51634f563dc8ae3070db2c4a8544305df1b60f007


Difference between bcrypt and older algorithms
The principal difference - MD5 and other hash functions designed to verify data have been designed to be fast,
and bcrypt() has been designed to be slow.
When you are verifying data, you want the speed, because you want to verify the data as fast as possible.
When you are trying to protect credentials, the speed works against you. An attacker with a copy of a
password hash will be able to execute many more brute force attacks because MD5 and SHA1, etc, are cheap to
execute.
bcrypt in contrast is deliberately expensive. This matters little when there are one or two tries to
authenticate by the genuine user, but is much more costly to brute-force.



https://crackstation.net/hashing-security.htm
http://stackoverflow.com/questions/7072478/whats-the-difference-between-bcrypt-and-hashing-multiple-times

