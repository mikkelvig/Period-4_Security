
Explain about JSON Web Tokens (jwt) and why they are very suited for a REST-based API


A token is like a ticket that can grant you access to what you are requesting.

1. client sends credentials
2. server responds with access token
3. client requests a resource with access token in http header
4. server responds with protected resource


JWT's
A JSON Web Token, is a token encoded in JSON-format.
In authentication, when the user successfully logs in using his credentials, a JSON Web Token will be returned
and must be saved locally (typically in local storage, but cookies can be also used), instead of the
traditional approach of creating a session in the server and returning a cookie.

Whenever the user wants to access a protected route or resource, the user agent should send the JWT, typically
in the Authorization header using the Bearer schema. The content of the header should look like the following:

Authorization: Bearer <token>

This is a stateless authentication mechanism as the user state is never saved in server memory. The server's
protected routes will check for a valid JWT in the Authorization header, and if it's present, the user will be
allowed to access protected resources. As JWTs are self-contained, all the necessary information is there,
reducing the need to query the database multiple times.
This allows you to fully rely on data APIs that are stateless and even make requests to downstream services.
It doesn't matter which domains are serving your APIs, so Cross-Origin Resource Sharing (CORS) won't be an
issue as it doesn't use cookies.


https://jwt.io/introduction/